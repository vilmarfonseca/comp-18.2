%{

#include "tokens.h"
#include "hash.h"

int lineNumber = 1;
int running = 1;

%}

%%

%{
	#include "tokens.h"

	int lineNumber = 1;
	int running = 1;

	int getLineNumber();
	int isRunning();

%}

%%

	/* PALAVRAS RESERVADAS DA LINGUAGEM */

char 			{ return KW_CHAR; }
int  	 		{ return KW_INT; }
float 			{ return KW_FLOAT; }	
if				{ return KW_IF; }
then			{ return KW_THEN; }
else			{ return KW_ELSE; }
while			{ return KW_WHILE; }
read 			{ return KW_READ; }
return			{ return KW_RETURN; }
print 			{ return KW_PRINT; }

	/* OPERADORES COMPOSTOS */

<=				{ return OPERATOR_LE; }
>=				{ return OPERATOR_GE; }   
==				{ return OPERATOR_EQ; }   
||				{ return OPERATOR_OR; }   
&&				{ return OPERATOR_AND; }
!				{ return OPERATOR_NOT; }


	/* CARACTERES ESPECIAIS */

[,;:dbqp[]+=*/<>=!&$#]	{ return yytext[0]; }

	/*LITERAIS E IDENTIFICADORES*/

[a-zA-Z_][a-zA-Z_0-9_]*		{ hashInsert(TK_IDENTIFIER, yytext); return TK_IDENTIFIER; }
[0-9]+						{ hashInsert(LIT_INTEGER, yytext); return LIT_INTEGER; }
\'.\' 						{ hashInsert(LIT_CHAR, yytext); return LIT_CHAR; }
\"([^\"\\\n]|\\.)*\" 		{ hashInsert(LIT_STRING, yytext); return LIT_STRING; }
[0-9]+\.[0-9]+				{ hashInsert(LIT_FLOAT, yytext); return LIT_FLOAT; }

	/* COMENTÁRIOS, NOVA LINHA E TABULAÇÃO */

"//".*
"/*"						{ BEGIN(COMMENT); }
<COMMENT>"*/"				{ BEGIN(INITIAL); }
<COMMENT>"\n"				{ lineNumber++; }
[ \t]
"\n"						{ lineNumber++; }	
.	                        { return TOKEN_ERROR; }

%%
#include <stdio.h>
#include "main.c"

int getLineNumber(){
	return lineNumber;	
}

int isRunning(){
	return running;
}

int yywrap()
{
    running = 0;
	return 1;
}

